{{> layout/header}}

<style>
	/* .modal { */
	/* display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.7); */
	/* } */

	.modal-content {
		background-color: #fff;
		margin: 15% auto;
		padding: 20px;
		border: 1px solid #888;
		width: 400px;
		height: 150px;
		position: relative;
		left: 0%;
		top: -15%;
		max-height: calc(80% - 100px); /* 화면 높이에서 40px 제외 */
		max-width: calc(80% - 40px); /* 화면 높이에서 40px 제외 */
		overflow-y: auto;
	}

	.close {
		color: #aaa;
		float: right;
		font-size: 28px;
		font-weight: bold;
	}

	.close:hover,
	.close:focus {
		color: black;
		text-decoration: none;
		cursor: pointer;
	}

	.modal-backdrop {
		display: none;
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-color: rgba(0, 0, 0, 0.25);
		z-index: 1; /* 모달보다 위에 표시되도록 설정 */
	}

	/* 모달 활성화 시 백드롭 표시 */
	.modal.active + .modal-backdrop {
		display: block;
	}
</style>

<!-- 메인페이지(인덱스) 화면-->
<!-- 1, 6, 7, 8, 9 화면 연관-->
<!-- TODO 로그인전, 후 NavBar 설정 필요  -->

<div class="d-flex justify-content-center align-items-center">
	<div class="col-auto"></div>

	<div class="col-xxl-7 col-xl-9 col-lg-10 col-md-11 col-sm-12">
		<form action="/" method="get" id="selectform">
			<!-- form="selectform"랑 id 같게 해야 받아옴  -->
			<div class="d-flex justify-content-around ps-4 pe-4">
				<div class="order-2 m-2 border border-info col-4">
					<h4 class="mt-2 text-center mb-0">기술별</h4>

					<div class="d-flex justify-content-between">
						<div class="form-check d-inline-block ms-3 me-2 align-self-end">
							<label class="form-check-label">
								<input
									class="form-check-input"
									type="checkbox"
									name="skillList"
									id="all"
									value="all"
									onclick="skillCheck(this)"
								/>
								모두</label
							>
						</div>
						<div
							class="btn btn-primary me-3 m-1 mt-0 btn-sm"
							onclick="searchOnlySkill()"
						>
							기술만 검색
						</div>
					</div>

					<hr class="m-1"/>
					<div class="d-flex flex-wrap">
						{{#skillList}}
							<div class="form-check d-inline-block ms-3 me-2">
								<label class="form-check-label">
									<input
										class="skillFind form-check-input"
										type="checkbox"
										name="skillList"
										value="{{ skillname }}"
										id="{{ skillname }}"
										onclick="skillAllCheck()"
									/>
									{{ skillname }}</label
								>
							</div>
						{{/skillList}}
					</div>
				</div>

				<div class="order-1 m-2 border border-info col-4">
					<h4 class="mt-2 text-center mb-0">지역별</h4>

					<div class="d-flex justify-content-between">
						<div class="form-check d-inline-block ms-3 me-2 align-self-end">
							<label class="form-check-label">
								<input
									class="form-check-input all3checkbox"
									type="checkbox"
									name=""
									id=""
									value=""
									onclick="regionCheck(this)"
								/>
								모두</label
							>
						</div>
						<div
							class="btn btn-primary me-3 m-1 mt-0 btn-sm"
							onclick="searchOnlyRegion()"
						>
							지역만 검색
						</div>
					</div>

					<hr class="m-1"/>

					<div class="d-flex justify-content-around p-1">
						<div class="d-flex justify-content-center">
							<select
								class="me-2"
								name="region"
								form="selectform"
								onchange="regionCheck2(this)"
							>
								<option class="all3" id="all3" value="all">선택하세요.</option>
								<option id="서울" value="서울">서울/인천/경기</option>
								<option id="부산" value="부산">부산/울산/경남</option>
								<option id="대구" value="대구">대구/경북</option>
								<option id="광주" value="광주">광주/전라</option>
								<option id="대전" value="대전">대전/세종/충청</option>
								<option id="강원" value="강원">강원</option>
								<option id="제주" value="제주">제주</option>
							</select>

							<select class="">
								<option id="" value="">선택하세요.</option>
								<option value="강서구">강서구</option>
								<option value="금정구">금정구</option>
								<option value="남구">남구</option>
								<option value="동구">동구</option>
								<option value="동래구">동래구</option>
							</select>
						</div>
					</div>
				</div>

				<div class="order-3 m-2 border border-info col-4">
					<h4 class="mt-2 text-center mb-0">직무별</h4>

					<div class="d-flex justify-content-between">
						<div class="form-check d-inline-block ms-3 me-2 align-self-end">
							<label class="form-check-label">
								<input
									class="form-check-input"
									type="radio"
									id="all2"
									name="position"
									value="all"
								/>
								모두</label
							>
						</div>
						<div
							class="btn btn-primary me-3 m-1 mt-0 btn-sm"
							onclick="searchOnlyPosition()"
						>
							직무만 검색
						</div>
					</div>

					<hr class="m-1"/>

					<div class="d-flex flex-wrap">
						<div class="form-check d-inline-block ms-3 me-2">
							<label class="form-check-label">
								<input
									class="form-check-input"
									type="radio"
									id="백엔드"
									name="position"
									value="백엔드"
								/>
								백엔드</label
							>
						</div>
						<div class="form-check d-inline-block ms-3 me-2">
							<label class="form-check-label">
								<input
									class="form-check-input"
									type="radio"
									id="프론트엔드"
									name="position"
									value="프론트엔드"
								/>
								프론트엔드</label
							>
						</div>
						<div class="form-check d-inline-block ms-3 me-2">
							<label class="form-check-label">
								<input
									class="form-check-input"
									type="radio"
									id="풀스택"
									name="position"
									value="풀스택"
								/>
								풀스택</label
							>
						</div>
						<div class="form-check d-inline-block ms-3 me-2">
							<label class="form-check-label">
								<input
									class="form-check-input"
									type="radio"
									id="안드로이드"
									name="position"
									value="안드로이드"
								/>
								안드로이드</label
							>
						</div>
						<div class="form-check d-inline-block ms-3 me-2">
							<label class="form-check-label">
								<input
									class="form-check-input"
									type="radio"
									id="IOS"
									name="position"
									value="IOS"
								/>
								IOS</label
							>
						</div>
						<div class="form-check d-inline-block ms-3 me-2">
							<label class="form-check-label">
								<input
									class="form-check-input"
									type="radio"
									id="임베디드"
									name="position"
									value="임베디드"
								/>
								임베디드</label
							>
						</div>
						<div class="form-check d-inline-block ms-3 me-2">
							<label class="form-check-label">
								<input
									class="form-check-input"
									type="radio"
									id="빅데이터"
									name="position"
									value="빅데이터"
								/>
								빅데이터</label
							>
						</div>
						<div class="form-check d-inline-block ms-3 me-2">
							<label class="form-check-label">
								<input
									class="form-check-input"
									type="radio"
									id="서버"
									name="position"
									value="서버"
								/>
								서버</label
							>
						</div>
						<div class="form-check d-inline-block ms-3 me-2">
							<label class="form-check-label">
								<input
									class="form-check-input"
									type="radio"
									id="머신러닝"
									name="position"
									value="머신러닝"
								/>
								머신러닝</label
							>
						</div>
					</div>
				</div>
			</div>
			<div class="m-2 mb-3">
				<div class="btn btn-light w-100 big-search" onclick="searchAll()">
					검색하기
				</div>
			</div>

			<textarea
				class="visually-hidden"
				id="pageFind"
				name="page"
				rows="1"
				cols="50"
			>{{#page}}{{ page }}{{/page}}{{^page}}0{{/page}}</textarea
			>

			<div class="text-center">
				구인공고 검색 결과 : 총합 <b>{{ totalCount }}</b
			>개, <b>{{ totalPage }}</b
			>페이지
			</div>
			<ul class="pagination d-flex justify-content-center mt-1">
				<li class="page-item {{#first}}disabled{{/first}}">
					<button class="page-link" onclick="searchAllPageMinus()">
						이전 페이지
					</button>
				</li>
				<li class="page-item">
					<div class="page-link">
						{{#page}}{{ page }}{{/page}}{{^page}}0{{/page}}
					</div>
				</li>
				<li class="page-item {{#last}}disabled{{/last}}">
					<button class="page-link" onclick="searchAllPagePlus()">
						다음 페이지
					</button>
				</li>
			</ul>
		</form>

		<div class="mb-4 d-flex flex-wrap">
			{{#postingList}}
				{{#col3}}
				<div class="col-lg-4 col-md-4 col-sm-6">
				{{/col3}}
				{{^col3}}
				<div class="col-lg-3 col-md-4 col-sm-6">
				{{/col3}}
				<div class="border border-info m-2 ps-2 pe-2 pt-1">
					<h4 class="text-center fw-bold">{{ user.compname }}</h4>
					{{#user.photo




					}}<a
						href="/comp/posting/{{ id }}"
						class="text-black text-decoration-none"
					><img
						src="/images/{{ user.photo }}"
						class="img-fluid d-block m-auto"
						style="height: 120px"
					/>{{/user.photo}}
					{{^user.photo




					}}<a
						href="/comp/posting/{{ id }}"
						class="text-black text-decoration-none"
					><img
						src="/images/no_logo.png"
						class="img-fluid d-block m-auto"
						style="height: 120px"
					/>{{/user.photo}}
					<h5 class="mt-1 fw-bold">{{ title }}</h5>
					<div class="mb-1 fst-italic">{{ position }}</div>
					<div class="mb-1">
						{{#postingSkill




						}}<span
							class="badge me-1"
							style="background-color: #7f00ff"
						>{{ skill.skillname }}</span
						>{{/postingSkill}}
					</div>
					<div>
						{{#career




						}}<span class="badge" style="background-color: #f9b233">{{
						career
						}}</span
						>{{/career}}
						{{#education




						}}<span class="badge" style="background-color: #f27d0c">{{
						education
						}}</span
						>{{/education}}
						<span class="badge" style="background-color: #f95959">{{
						region
						}}</span>
					</div>
				</a>
				</a>
					<div class="d-flex justify-content-between">
						{{^sessionComp.compname}}
							<button
								type="button"
								class="border-0 bg-white mt-1 like-button"
								id="posting{{ id }}"
								onclick="bookmarkChange(`{{ id }}`)"
							>
								<h3>🤍</h3></button
							>{{/sessionComp.compname}}
						<!-- <button type="button" class="border-0 bg-white mt-2"><h3>❤️</h3></button> -->
						<!-- 기업 유저는 북마크 못하게 -->
						{{#sessionComp.compname}}
							<button type="button" class="invisible"><h3>🤍</h3></button
							>{{/sessionComp.compname}}

						<span class="expiryDate fw-bold align-self-center me-2"
						>{{#expiryDate}}{{ expiryDate }}{{/expiryDate}}</span
						>
					</div>
				</div>
			</div>
			{{/postingList}}
		</div>
		</div>

		<div class="col-auto"></div>
	</div>

	<div id="customModal" class="modal" onclick="closeModal()">
		<div class="d-flex modal-content">
			<div class="d-flex justify-content-between align-content-center">
				<div id="print" class="d-inline text align-self-center">
					모달 내용을 여기에 입력하세요.
				</div>
				<div class="align-self-end">
					<input
						id="applyPage"
						type="button"
						class="btn btn-sm btn-primary p-0 ps-1 pe-1 failButton"
						value="보러가기"
						style="
              display: flex;
              align-items: end;
              width: 65px;
              height: 25px;
              font-size: 14px;
            "
						onclick="applyPage()"
					/>
				</div>
				<div class="close d-inline" onclick="closeModal()">X</div>
			</div>
		</div>
	</div>

	<div id="modalBackdrop" class="modal-backdrop"></div>

	<input type="hidden" value="{{ json }}" name="json" id="json"/>
	<input
		type="hidden"
		value="{{ position }}"
		name="positionSet"
		id="positionSet"
	/>
	<input type="hidden" value="{{ region }}" name="regionSet" id="regionSet"/>

	{{#sessionUser}}
		<input type="hidden" value="{{ sessionUser.id }}" name="userId" id="userId"/>
		<input
			type="hidden"
			value="{{ sessionUser.username }}"
			name="username"
			id="username"
		/>

		<input
			type="hidden"
			value="{{ sessionUser.message }}"
			name="message"
			id="message"
		/>

		<input
			type="hidden"
			value="{{ sessionUser.stateChange }}"
			name="stateChange"
			id="stateChange"
		/>

	{{/sessionUser}}
	<script>
		document.addEventListener("DOMContentLoaded", function () {
			const likeButtons = document.querySelectorAll(".like-button");

			// 각각의 좋아요 버튼에 클릭 이벤트 리스너 추가
			likeButtons.forEach((button) => {
				button.addEventListener("click", function () {
					// 버튼의 클래스를 토글 (liked 클래스 추가/제거)
					button.classList.toggle("liked");

					// 버튼의 하트 아이콘 변경
					const heartIcon = button.querySelector("h3");
					if (button.classList.contains("liked")) {
						heartIcon.textContent = "❤️";
					} else {
						heartIcon.textContent = "🤍";
					}
				});
			});
		});

		function toggleLike(postId) {
			// 이 부분에서 서버로 북마크 추가 또는 제거 요청을 보내고,
			// 서버에서 처리가 완료되면 success 또는 error 콜백을 처리하여
			// 클라이언트 측에서 하트 모양을 변경합니다.

			// AJAX 또는 Fetch API를 사용하여 서버와 통신하여 북마크를 추가 또는 제거할 수 있습니다.
			// 이 예시에서는 서버 요청이 성공하면 클라이언트 측에서 하트 모양을 변경하도록 가정합니다.

			// postId를 사용하여 서버 요청을 구성하고, 북마크 추가 또는 제거 요청을 보냅니다.
			// 성공적인 응답을 받으면 해당 공고의 하트 모양을 변경합니다.

			const likeButton = document.querySelector(`[data-postid="${postId}"]`);

			// 이 부분에서 서버 요청을 보내고, 성공 또는 실패 시 적절한 처리를 수행합니다.
			// 서버로 요청을 보내고 응답을 받는 방법은 AJAX 또는 Fetch API를 사용하여 구현할 수 있습니다.

			// 아래 예시에서는 단순히 하트 모양을 토글(toggle)합니다.
			if (likeButton.classList.contains("liked")) {
				likeButton.classList.remove("liked");
			} else {
				likeButton.classList.add("liked");
			}
		}

		function Ddaycheck(day) {
			if (typeof day === "string") {
				let day2 = new Date(day);
				return Ddaycheck(day2);
			} else {
				let today = new Date();

				// console.log((day-today) / (1000 * 60 * 60 * 24));
				let DDay = Math.ceil((day - today) / (1000 * 60 * 60 * 24));

				if (DDay == 0) {
					// console.log("D-Day");
					return "D-Day";
				} else if (DDay < 0) {
					// console.log("만료");
					return "만료";
				} else {
					// console.log("D-"+DDay);
					return "D-" + DDay;
				}
			}
		}

		let day = document.querySelectorAll(".expiryDate");
		day.forEach((element) => {
			element.textContent = Ddaycheck(element.textContent);
		});

		// 날짜 D-Day로 바꾸기

		function skillCheck(selectAll) {
			let skillAll = document.querySelectorAll(".skillFind");
			// let allCheck=document.querySelector("#all");

			skillAll.forEach((element) => {
				element.checked = selectAll.checked;
			});
		}

		function skillAllCheck() {
			let allCheck = document.querySelector("#all");
			let skillAll = document.querySelectorAll(".skillFind");
			let skillAllCheck = document.querySelectorAll(".skillFind:checked");

			if (skillAll.length == skillAllCheck.length) {
				allCheck.checked = true;
			} else {
				allCheck.checked = false;
			}
		}

		// 기술 모두 체크박스 작동하게

		//////////
		function check() {
			const json = JSON.parse(document.querySelector("#json").value);

			let skillCheckBoxAll = document.getElementById("all");

			if (json[0] != skillCheckBoxAll.value) {
				json.forEach((element) => {
					document.getElementById(element).checked = true;
				});
				skillCheckBoxAll.checked = false;
			} else {
				skillCheckBoxAll.checked = true;
				let skillFind2 = document.querySelectorAll(".skillFind");
				skillFind2.forEach((element) => {
					element.checked = true;
				});
			}
		}

		check();

		const positionSet = document.querySelector("#positionSet").value;
		if (positionSet == "all") {
			document.getElementById("all2").checked = true;
		} else {
			document.getElementById(positionSet).checked = true;
		}

		const regionSet = document.querySelector("#regionSet").value;
		if (regionSet == "all") {
			document.querySelector(".all3checkbox").checked = true;
		} else {
			document.getElementById(regionSet).selected = true;
		}

		////////// 현재 검색중인거 뷰 다시 불러와도 읽어오게

		function regionCheck(checkbox) {
			if (checkbox.checked) {
				document.getElementById("all3").selected = true;
			}
		}

		function regionCheck2(checkbox) {
			let select = checkbox.value;
			if (select == "all") {
				document.querySelector(".all3checkbox").checked = true;
			} else {
				document.querySelector(".all3checkbox").checked = false;
			}
		}

		// 지역별 선택바-모두체크박스 연동

		function searchOnlyPosition() {
			document.querySelector("#pageFind").value = 0;

			document.querySelector(".all3checkbox").checked = true;
			document.getElementById("all3").selected = true;

			let skillfind = document.querySelectorAll(".skillFind");
			skillfind.forEach((element) => {
				element.checked = false;
			});
			document.querySelector("#all").checked = true;

			let submit = document.getElementById("selectform");
			submit.submit();
		}

		function searchOnlyRegion() {
			document.querySelector("#pageFind").value = 0;

			document.getElementById("all2").checked = true;

			let skillfind = document.querySelectorAll(".skillFind");
			skillfind.forEach((element) => {
				element.checked = false;
			});
			document.querySelector("#all").checked = true;

			let submit = document.getElementById("selectform");
			submit.submit();
		}

		function searchOnlySkill() {
			document.querySelector("#pageFind").value = 0;

			if (document.querySelector("#all").checked) {
				let skillfind = document.querySelectorAll(".skillFind");
				skillfind.forEach((element) => {
					element.checked = false;
				});
			}

			document.querySelector(".all3checkbox").checked = true;
			document.getElementById("all3").selected = true;

			document.getElementById("all2").checked = true;

			let submit = document.getElementById("selectform");
			submit.submit();
		}

		function searchAll() {
			document.querySelector("#pageFind").value = 0;

			if (document.querySelector("#all").checked) {
				let skillfind = document.querySelectorAll(".skillFind");
				skillfind.forEach((element) => {
					element.checked = false;
				});
			}
			let submit = document.getElementById("selectform");
			submit.submit();
		}

		function searchAllPagePlus() {
			pageFind = document.querySelector("#pageFind");
			// console.log(pageFind.value);
			pageFind.value++;
			// console.log(pageFind.value);

			if (document.querySelector("#all").checked) {
				let skillfind = document.querySelectorAll(".skillFind");
				skillfind.forEach((element) => {
					element.checked = false;
				});
			}
			let submit = document.getElementById("selectform");
			submit.submit();
		}

		function searchAllPageMinus() {
			pageFind = document.querySelector("#pageFind");
			// console.log(pageFind.value);
			pageFind.value--;
			// console.log(pageFind.value);

			if (document.querySelector("#all").checked) {
				let skillfind = document.querySelectorAll(".skillFind");
				skillfind.forEach((element) => {
					element.checked = false;
				});
			}
			let submit = document.getElementById("selectform");
			submit.submit();
		}

		let bookmarked = "<h3>❤️</h3>";
		let noBookmark = "<h3>🤍</h3>";
		let customModal = document.querySelector("#customModal");
		let modalBackdrop = document.querySelector("#modalBackdrop");

		async function bookmarkPoint(id) {
			// console.log('bookmarkPoint실행')
			// let response = await fetch(`/check?username=${username}`);
			let postingNum = document.querySelectorAll(".posting");
			// 		console.log(postingNum);

			let response = await fetch("/api/user/bookmark");
			// let bookmarkPoint = document.querySelector("#username").value;
			let body = await response.json();

			let dataArray = body.data;
			if (dataArray != null) {
				for (let item of dataArray) {
					let postingNum = document.querySelector(`#posting${item.id}`);
					let currentValue = postingNum.getAttribute("data-value");
					currentValue = true;
					postingNum.innerHTML = bookmarked;
					postingNum.setAttribute("data-value", currentValue);
				}
			}
		}

		// let response = await fetch("/api/tech?categoryId=" + categoryId);
		bookmarkPoint();

		async function bookmarkChange(id) {
			let postingNum = document.querySelector(`#posting${id}`);
			let currentValue = postingNum.getAttribute("data-value");

			if (currentValue == "true") {
				console.log(id);
				let response = await fetch(`/api/user/bookmark/${id}/delete`);
				let body = await response.json();

				if (body.sucuess == false) {
					// alert(body.data);
					openModal(body.data);
					customModal.focus();
					postingNum.blur();
				}
				if (body.sucuess == true) {
					// alert(body.data);
					document.querySelector("#applyPage").setAttribute("type", "hidden");
					openModal(body.data);
					customModal.focus();
					postingNum.blur();
					currentValue = false;
					postingNum.innerHTML = noBookmark;
				}
			} else {
				console.log(id);
				let response = await fetch(`/api/user/bookmark/${id}/save`);
				let body = await response.json();

				if (body.sucuess == false) {
					// alert(body.data);
					document.querySelector("#applyPage").setAttribute("type", "hidden");
					openModal(body.data);
					customModal.focus();
					postingNum.blur();
				}
				if (body.sucuess == true) {
					// alert(body.data);
					document.querySelector("#applyPage").setAttribute("type", "hidden");
					openModal(body.data);
					customModal.focus();
					postingNum.blur();
					currentValue = true;
					postingNum.innerHTML = bookmarked;
				}
			}

			postingNum.setAttribute("data-value", currentValue);
		}

		function openModal(string) {
			customModal.style.display = "block";
			let text = document.querySelector("#print");
			text.innerText = string;
			customModal.classList.add("active");
		}

		function closeModal() {
			console.log("closeModal 실행");
			customModal.classList.remove("active");
			document.querySelector("#applyPage").setAttribute("type", "hidden");
			customModal.style.display = "none";
			messageCheckOut();
		}

		function closeBackdrop() {
			closeModal();
		}

		document.addEventListener("keydown", (event) => {
			if (event.key === "Enter" && customModal.style.display === "block") {
				closeModal();
			}
		});

		async function messageCheckOut() {
			let userId = document.querySelector("#userId").value;
			let username = document.querySelector("#username").value;
			console.log("userId : " + userId);
			console.log("username : " + username);

			let requestBody = {
				userId: userId,
				username: username,
			};

			let response = await fetch(`/api/user/ismessage`, {
				method: "post",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify(requestBody),
			});
		}

		// let content = document.querySelector("#reply").value;
		//   let userId = document.querySelector("#userId").value;
		//   console.log(content+"  "+ id+"  "+ userId);

		//   let response = await fetch(`/api/master/${id}/saveReply`, {
		//     method: "post",
		//     headers: {
		//       "Content-Type": "application/json",
		//     },
		//     body: JSON.stringify(requestBody),
		//   });

		//   let result = await response.json();
		//   console.log(result);

		let string = "[알림] \n";

		function messageCheck() {
			let message;
			if (document.querySelector("#message")) {
				message = document.querySelector("#message").value;
				stateChange = document.querySelector("#stateChange").value;
				// message = document.querySelector("#message").value;
				console.log("메세지 체크 실행됨 message : " + message);
				if (message == "true") {
					console.log("모달 실행  message : " + message);
					string += "\n 문의에 대한 답변이 달렸습니다.";
					document.querySelector("#applyPage").setAttribute("onclick", "questionListPage()");
					openModal(string);
					string = "[알림] \n";
					if (stateChange != "true") {
						messageCheckOut();
					}
				}

				if (stateChange == "true") {
					console.log("모달 실행  stateChange : " + stateChange);
					string += "\n 지원결과가 발표되었습니다!";
					document.querySelector("#applyPage").setAttribute("onclick", "applyPage()");
					openModal(string);
					messageCheckOut();
				}
			}
		}

		messageCheck();

		function applyPage() {
			messageCheckOut();
			location.href = "/user/apply/list";
		}


		function questionListPage() {
			messageCheckOut();
			location.href = "/question/List";
		}
	</script>

{{> layout/footer}}